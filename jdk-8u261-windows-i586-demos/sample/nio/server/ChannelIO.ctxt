#BlueJ class context
comment0.target=ChannelIO
comment0.text=\r\n\ A\ helper\ class\ for\ properly\ sizing\ inbound\ byte\ buffers\ and\r\n\ redirecting\ I/O\ calls\ to\ the\ proper\ SocketChannel\ call.\r\n\ <P>\r\n\ Many\ of\ these\ calls\ may\ seem\ unnecessary\ until\ you\ consider\r\n\ that\ they\ are\ placeholders\ for\ the\ secure\ variant,\ which\ is\ much\r\n\ more\ involved.\ \ See\ ChannelIOSecure\ for\ more\ information.\r\n\r\n\ @author\ Brad\ R.\ Wetmore\r\n\ @author\ Mark\ Reinhold\r\n
comment1.params=sc\ blocking
comment1.target=ChannelIO(java.nio.channels.SocketChannel,\ boolean)
comment10.params=fc\ pos\ len
comment10.target=long\ transferTo(java.nio.channels.FileChannel,\ long,\ long)
comment10.text=\r\n\ Perform\ a\ FileChannel.TransferTo\ on\ the\ socket\ channel.\r\n
comment11.params=
comment11.target=boolean\ dataFlush()
comment11.text=\r\n\ Flush\ any\ outstanding\ data\ to\ the\ network\ if\ possible.\r\n\ <P>\r\n\ This\ isn't\ really\ necessary\ for\ the\ insecure\ variant,\ but\ needed\r\n\ for\ the\ secure\ one\ where\ intermediate\ buffering\ must\ take\ place.\r\n\ <P>\r\n\ Return\ true\ if\ successful.\r\n
comment12.params=
comment12.target=boolean\ shutdown()
comment12.text=\r\n\ Start\ any\ connection\ shutdown\ processing.\r\n\ <P>\r\n\ This\ isn't\ really\ necessary\ for\ the\ insecure\ variant,\ but\ needed\r\n\ for\ the\ secure\ one\ where\ intermediate\ buffering\ must\ take\ place.\r\n\ <P>\r\n\ Return\ true\ if\ successful,\ and\ the\ data\ has\ been\ flushed.\r\n
comment13.params=
comment13.target=void\ close()
comment13.text=\r\n\ Close\ the\ underlying\ connection.\r\n
comment2.params=sc\ blocking
comment2.target=ChannelIO\ getInstance(java.nio.channels.SocketChannel,\ boolean)
comment3.params=
comment3.target=java.nio.channels.SocketChannel\ getSocketChannel()
comment4.params=remaining
comment4.target=void\ resizeRequestBB(int)
comment4.text=\r\n\ Return\ a\ ByteBuffer\ with\ "remaining"\ space\ to\ work.\ \ If\ you\ have\ to\r\n\ reallocate\ the\ ByteBuffer,\ copy\ the\ existing\ info\ into\ the\ new\ buffer.\r\n
comment5.params=
comment5.target=boolean\ doHandshake()
comment5.text=\r\n\ Perform\ any\ handshaking\ processing.\r\n\ <P>\r\n\ This\ variant\ is\ for\ Servers\ without\ SelectionKeys\ (e.g.\r\n\ blocking).\r\n\ <P>\r\n\ return\ true\ when\ we're\ done\ with\ handshaking.\r\n
comment6.params=sk
comment6.target=boolean\ doHandshake(java.nio.channels.SelectionKey)
comment6.text=\r\n\ Perform\ any\ handshaking\ processing.\r\n\ <P>\r\n\ This\ variant\ is\ for\ Servers\ with\ SelectionKeys,\ so\ that\r\n\ we\ can\ register\ for\ selectable\ operations\ (e.g.\ selectable\r\n\ non-blocking).\r\n\ <P>\r\n\ return\ true\ when\ we're\ done\ with\ handshaking.\r\n
comment7.params=
comment7.target=int\ read()
comment7.text=\r\n\ Resize\ (if\ necessary)\ the\ inbound\ data\ buffer,\ and\ then\ read\ more\r\n\ data\ into\ the\ read\ buffer.\r\n
comment8.params=
comment8.target=java.nio.ByteBuffer\ getReadBuf()
comment8.text=\r\n\ All\ data\ has\ been\ read,\ pass\ back\ the\ request\ in\ one\ buffer.\r\n
comment9.params=src
comment9.target=int\ write(java.nio.ByteBuffer)
comment9.text=\r\n\ Write\ the\ src\ buffer\ into\ the\ socket\ channel.\r\n
numComments=14
